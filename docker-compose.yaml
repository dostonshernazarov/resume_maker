version: '3.8'

services:

  migrate:
    image: migrate/migrate
    networks:
      - cv
    volumes:
      - ./user-service/migrations:/migrations
    command: [ "-path", "/migrations", "-database",  "postgres://postgres:root@postgres:5432/resume?sslmode=disable", "up" ]
    depends_on:
      - postgres-db

  minio:
    image: docker.io/bitnami/minio:2024
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - cv
    volumes:
      - 'minio_data:/data'
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_DEFAULT_BUCKETS=resumes

  postgres-db:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
      POSTGRES_DB: resume
    volumes:
      - db:/databasedatadb/postgres
    ports:
      - "5332:5332"
    networks:
      - cv
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis-db:
    container_name: redis-db
    image: redis
    ports:
      - "6380:6380"
    restart: unless-stopped
    networks:
      - cv

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:latest
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - "22181:2181"
  #   networks:
  #     - db

  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "29092:29092"
  #   environment:
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   networks:
  #     - db

  user-service:
    container_name: user-service
    build: ./user-service
    depends_on:
      - redis-db
      - postgres-db
    ports:
      - "9090:9090"
    networks:
      - cv

  resume-service:
    container_name: resume-service
    build: ./resume-service
    depends_on:
      - redis-db
      - postgres-db
      - user-service
    ports:
      - "9080:9080"
    networks:
      - cv

  api-service:
    container_name: api-service
    build: ./api-service
    depends_on:
      - redis-db
      - postgres-db
      - resume-service
      - user-service
    ports:
      - "8080:8080"
    networks:
      - cv

networks:
  cv:
    driver: bridge

volumes:
  db:
  minio_data:
    driver: local
