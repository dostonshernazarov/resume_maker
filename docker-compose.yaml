version: '3.8'

services:
  # Jeager
  # jaeger-all-in-one:
  #   container_name: jaeger-all-in-one
  #   image: jaegertracing/all-in-one:latest
  #   ports:
  #     - "6831:6831/udp"
  #     - "16686:16686"
  #     - "14268:14268"
  #     - "14250:14250"
  #   networks:
  #     - db

  # Collector
  # otel-collector:
  #   container_name: otel-collector
  #   image: ${OTELCOL_IMG}
  #   command: [ "--config=/etc/otel-collector-config.yaml", "${OTELCOL_ARGS}" ]
  #   volumes:
  #     - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
  #   ports:
  #     - "4317:4317" # OTLP gRPC receiver
  #   depends_on:
  #     - jaeger-all-in-one
  #   networks:
  #     - db

  # Migration
  migrate:
    image: migrate/migrate
    networks:
      - db
    volumes:
      - ./user-service/migrations:/migrations
    command: [ "-path", "/migrations", "-database",  "postgres://postgres:doston@postgres:5432/resume?sslmode=disable", "up" ]
    depends_on:
      - postgres-db

  # Postgres
  postgres-db:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: doston
      PGDATA: /data/postgres
      POSTGRES_DB: resume
    volumes:
      - db:/databasedatadb/postgres
    ports:
      - "5332:5332"
    networks:
      - db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB
  # mongodb:
  #   container_name: mongodb
  #   image: mongo
  #   ports:
  #     - "27018:27018"
  #   volumes:
  #     - mongodata:/data/db
  #   networks:
  #     - db

  # Redis
  # redis-db:
  #   container_name: redis-db
  #   image: redis
  #   ports:
  #     - "6380:6380"
  #   restart: unless-stopped
  #   networks:
  #     - db

    # Kafka Zookeeper
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:latest
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - "22181:2181"
  #   networks:
  #     - db

  # Apache Kafka
  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "29092:29092"
  #   environment:
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   networks:
  #     - db

  # Client Service
  user-service:
    container_name: user-service
    build: ./user-service
    depends_on:
      - postgres-db
      # - zookeeper
      # - kafka
      # - mongodb
    ports:
      - "9090:9090"
    networks:
      - db

  # Job Service
  # establishment-service:
  #   container_name: establishment-service
  #   build: ./establishment-service-booking
  #   depends_on:
  #     - postgres-db
  #     # - client-service
  #     # - zookeeper
  #     # - kafka
  #     # - mongodb
  #   ports:
  #     - "50024:50024"
  #   networks:
  #     - db

  # Admin API Gateway
  # api-admin-service:
  #   container_name: api-admin-service
  #   build: ./api-admin-service
  #   depends_on:
  #     - postgres-db
  #     - client-service
  #     - job-service
  #     - zookeeper
  #     - kafka
  #     - mongodb
  #   ports:
  #     - "8090:8090"
  #   networks:
  #     - db

  # API Gateway
  api-service:
    container_name: api-service
    build: ./api-service
    depends_on:
      - postgres-db
    #   - user-service
    #   - establishment-service
    #   - redis-db
      # - zookeeper
      # - kafka
      # - api-admin-service
      # - mongodb
    ports:
      - "8080:8080"
    networks:
      - db

# Docker Networks
networks:
  db:
    driver: bridge

# Docker Volumes
volumes:
  # mongodata:
  db:
