definitions:
  models.Basics:
    properties:
      email:
        type: string
      image:
        type: string
      job_location:
        type: string
      label:
        type: string
      location:
        $ref: '#/definitions/models.Location'
      name:
        type: string
      phone:
        type: string
      profiles:
        items:
          $ref: '#/definitions/models.Profile'
        type: array
      salary:
        type: integer
      summary:
        type: string
      url:
        type: string
    type: object
  models.Certificate:
    properties:
      date:
        type: string
      issuer:
        type: string
      score:
        type: string
      title:
        type: string
      url:
        type: string
    type: object
  models.Education:
    properties:
      area:
        type: string
      courses:
        items:
          type: string
        type: array
      endDate:
        type: string
      institution:
        type: string
      location:
        type: string
      score:
        type: string
      startDate:
        type: string
      studyType:
        type: string
    type: object
  models.Error:
    properties:
      message:
        type: string
    type: object
  models.Interest:
    properties:
      keywords:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  models.Language:
    properties:
      fluency:
        type: string
      language:
        type: string
    type: object
  models.LastResumeReq:
    properties:
      basic_redis_id:
        type: string
      certificates:
        items:
          $ref: '#/definitions/models.Certificate'
        type: array
      interests:
        items:
          $ref: '#/definitions/models.Interest'
        type: array
      languages:
        items:
          $ref: '#/definitions/models.Language'
        type: array
      main_redis_id:
        type: string
      meta:
        $ref: '#/definitions/models.Meta'
      skills:
        items:
          $ref: '#/definitions/models.Skill'
        type: array
    type: object
  models.Location:
    properties:
      city:
        type: string
      countryCode:
        type: string
      region:
        type: string
    type: object
  models.Login:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.MainResumeReq:
    properties:
      basic_redis_id:
        type: string
      education:
        items:
          $ref: '#/definitions/models.Education'
        type: array
      main_redis_id:
        type: string
      projects:
        items:
          $ref: '#/definitions/models.Project'
        type: array
      work:
        items:
          $ref: '#/definitions/models.Work'
        type: array
    type: object
  models.Meta:
    properties:
      lang:
        type: string
      template:
        type: string
    type: object
  models.Profile:
    properties:
      network:
        type: string
      url:
        type: string
      username:
        type: string
    type: object
  models.Project:
    properties:
      description:
        type: string
      name:
        type: string
      url:
        type: string
    type: object
  models.RegisterReq:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
    type: object
  models.RegisterRes:
    properties:
      content:
        type: string
    type: object
  models.ResResume:
    properties:
      city:
        type: string
      filename:
        type: string
      id:
        type: string
      job_location:
        type: string
      job_title:
        type: string
      salary:
        type: integer
      userID:
        type: string
    type: object
  models.ResResumeList:
    properties:
      count:
        type: integer
      resumes:
        items:
          $ref: '#/definitions/models.ResResume'
        type: array
    type: object
  models.ResumeGenetare:
    properties:
      basics:
        $ref: '#/definitions/models.Basics'
      certificates:
        items:
          $ref: '#/definitions/models.Certificate'
        type: array
      education:
        items:
          $ref: '#/definitions/models.Education'
        type: array
      interests:
        items:
          $ref: '#/definitions/models.Interest'
        type: array
      job_location:
        example: offline
        type: string
      labels:
        $ref: '#/definitions/models.ResumeLabels'
      languages:
        items:
          $ref: '#/definitions/models.Language'
        type: array
      meta:
        $ref: '#/definitions/models.Meta'
      projects:
        items:
          $ref: '#/definitions/models.Project'
        type: array
      salary:
        type: integer
      skills:
        items:
          $ref: '#/definitions/models.Skill'
        type: array
      softSkills:
        items:
          $ref: '#/definitions/models.Skill'
        type: array
      work:
        items:
          $ref: '#/definitions/models.Work'
        type: array
    type: object
  models.ResumeLabels:
    properties:
      education:
        type: string
      experiences:
        type: string
      interests:
        type: string
      languages:
        type: string
      profile:
        type: string
      projects:
        type: string
      since:
        type: string
      skills:
        type: string
      softSkills:
        type: string
    type: object
  models.Skill:
    properties:
      keywords:
        items:
          type: string
        type: array
      level:
        type: string
      name:
        type: string
    type: object
  models.TokenResp:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      role:
        type: string
      user_id:
        type: string
    type: object
  models.UserReq:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  models.UserRes:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      image:
        type: string
      phone_number:
        type: string
      refresh_token:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  models.UserResCreate:
    properties:
      access_token:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      image_url:
        type: string
      phone_num:
        type: string
      refresh_token:
        type: string
      role:
        type: string
    type: object
  models.UserUpdateReq:
    properties:
      full_name:
        type: string
      phone_number:
        type: string
    type: object
  models.Users:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.UserRes'
        type: array
    type: object
  models.Work:
    properties:
      company:
        type: string
      contract_type:
        type: string
      endDate:
        type: string
      location:
        type: string
      position:
        type: string
      skills:
        items:
          type: string
        type: array
      startDate:
        type: string
      summary:
        type: string
    type: object
info:
  contact: {}
  description: API for CV Maker
  title: Welcome To CV Maker API
paths:
  /v1/media/user-photo:
    post:
      consumes:
      - application/json
      description: Through this api front-ent can upload user photo and get the link
        to the media.
      parameters:
      - description: Image
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Upload User photo
      tags:
      - MEDIA
  /v1/resume/basic:
    post:
      consumes:
      - application/json
      description: Api for post basic resume
      parameters:
      - description: BasicResumeData
        in: body
        name: BasicResumeData
        required: true
        schema:
          $ref: '#/definitions/models.Basics'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: BASIC RESUME
      tags:
      - STEP-RESUME
  /v1/resume/generate:
    post:
      consumes:
      - application/json
      description: This API for generate a resume
      parameters:
      - description: Resume Model
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.LastResumeReq'
      produces:
      - application/json
      responses:
        "200":
          description: Resume URL
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Generate a Resume
      tags:
      - STEP-RESUME
  /v1/resume/generate-resume:
    post:
      consumes:
      - application/json
      description: This API for generate a resume
      parameters:
      - description: Resume Model
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ResumeGenetare'
      produces:
      - application/json
      responses:
        "200":
          description: Resume URL
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Generate a Resume
      tags:
      - RESUME
  /v1/resume/list:
    get:
      consumes:
      - application/json
      description: Api for ListREsume
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResResumeList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: LIST RESUME
      tags:
      - RESUME
  /v1/resume/main:
    post:
      consumes:
      - application/json
      description: Api for post Main resume
      parameters:
      - description: MainResumeData
        in: body
        name: MainResumeData
        required: true
        schema:
          $ref: '#/definitions/models.MainResumeReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Main RESUME
      tags:
      - STEP-RESUME
  /v1/resume/resume-photo:
    post:
      consumes:
      - application/json
      description: Through this api front-ent can upload resume photo and get the
        link to the resume.
      parameters:
      - description: Image
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Upload Resume Photo
      tags:
      - MEDIA
  /v1/resumes/{id}:
    delete:
      consumes:
      - application/json
      description: Api for Delete Resume
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: DELETE
      tags:
      - RESUME
  /v1/token/{refresh}:
    get:
      consumes:
      - application/json
      description: Api for updated access token
      parameters:
      - description: Refresh Token
        in: path
        name: refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: UPDATE TOKEN
      tags:
      - TOKEN
  /v1/users:
    post:
      consumes:
      - application/json
      description: Api for Create
      parameters:
      - description: createModel
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.UserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: CREATE
      tags:
      - USER
    put:
      consumes:
      - application/json
      description: Api for Update
      parameters:
      - description: createModel
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: UPDATE
      tags:
      - USER
  /v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Api for Delete
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: DELETE
      tags:
      - USER
    get:
      consumes:
      - application/json
      description: Api for Get
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: GET
      tags:
      - USER
  /v1/users/code:
    get:
      consumes:
      - application/json
      description: Api for verify new password code
      parameters:
      - in: query
        name: code
        type: string
      - in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: FORGET PASSWORD CODE
      tags:
      - SET-PASSWORD
  /v1/users/list:
    get:
      consumes:
      - application/json
      description: Api for ListUsers
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: LIST USERS
      tags:
      - USER
  /v1/users/login:
    post:
      consumes:
      - application/json
      description: Api for login user
      parameters:
      - description: Login
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: LOGIN
      tags:
      - LOGIN
  /v1/users/password:
    put:
      consumes:
      - application/json
      description: Api for update new password
      parameters:
      - in: query
        name: email
        type: string
      - in: query
        name: password
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: SET NEW PASSWORD
      tags:
      - SET-PASSWORD
  /v1/users/register:
    post:
      consumes:
      - application/json
      description: Api for register a new user
      parameters:
      - description: RegisterUser
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.RegisterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: REGISTER USER
      tags:
      - SIGNUP
  /v1/users/resume/list:
    get:
      consumes:
      - application/json
      description: Api for ListUsersResume
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResResume'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: LIST USER RESUME
      tags:
      - RESUME
  /v1/users/set/{email}:
    get:
      consumes:
      - application/json
      description: Api for set new password
      parameters:
      - description: EMAIL
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: FORGET PASSWORD
      tags:
      - SET-PASSWORD
  /v1/users/token:
    get:
      consumes:
      - application/json
      description: Api for Get user by token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: GET BY TOKEN
      tags:
      - USER
  /v1/users/verify:
    get:
      consumes:
      - application/json
      description: Api for verify a new user
      parameters:
      - in: query
        name: code
        type: string
      - in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: VERIFICATION
      tags:
      - SIGNUP
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
