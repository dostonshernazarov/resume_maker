definitions:
  models.AttractionModel:
    properties:
      attraction_id:
        type: string
      attraction_name:
        type: string
      contact_number:
        type: string
      created_at:
        type: string
      description:
        type: string
      images:
        items:
          $ref: '#/definitions/models.ImageModel'
        type: array
      licence_url:
        type: string
      location:
        $ref: '#/definitions/models.LocationModel'
      owner_id:
        type: string
      rating:
        type: number
      updated_at:
        type: string
      website_url:
        type: string
    type: object
  models.BookingRes:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      hra_id:
        type: string
      id:
        type: string
      is_canceled:
        type: boolean
      number_of_people:
        type: integer
      reason:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      will_arrive:
        type: string
      will_leave:
        type: string
    type: object
  models.CreateAttraction:
    properties:
      address:
        default: 87G9+V57, Shaykhontohur Street 28, Tashkent, Toshkent Shahri
        type: string
      attraction_name:
        default: Anhor Park
        type: string
      city:
        default: Tashkent
        type: string
      contact_number:
        default: +(99891)-234-56-78
        type: string
      country:
        default: Uzbekistan
        type: string
      description:
        default: available for all ages
        type: string
      latitude:
        default: 40.7128
        type: number
      licence_url:
        default: https://creativecommons.org/licenses/by/4.0/
        type: string
      longitude:
        default: 74.006
        type: number
      rating:
        default: 4.3
        type: number
      state_province:
        default: Shaykhontohur
        type: string
      website_url:
        default: https://creativecommons.org/licenses/by/4.1/
        type: string
    type: object
  models.CreateBookingReq:
    properties:
      hra_id:
        type: string
      is_canceled:
        type: boolean
      number_of_people:
        type: integer
      reason:
        type: string
      will_arrive:
        type: string
      will_leave:
        type: string
    type: object
  models.CreateHotel:
    properties:
      address:
        default: 87G9+V57, Shaykhontohur Street 28, Tashkent, Toshkent Shahri
        type: string
      city:
        default: Tashkent
        type: string
      contact_number:
        default: +(99891)-234-56-78
        type: string
      country:
        default: Uzbekistan
        type: string
      description:
        default: in affordable prices
        type: string
      hotel_name:
        default: Silk Road
        type: string
      latitude:
        default: 40.7128
        type: number
      licence_url:
        default: https://creativecommons.org/licenses/by/1.2/
        type: string
      longitude:
        default: 74.006
        type: number
      rating:
        default: 4.6
        type: number
      state_province:
        default: Shaykhontohur
        type: string
      website_url:
        default: https://creativecommons.org/licenses/by/1.3/
        type: string
    type: object
  models.CreateRestaurant:
    properties:
      address:
        default: 87G9+V57, Shaykhontohur Street 28, Tashkent, Toshkent Shahri
        type: string
      city:
        default: Tashkent
        type: string
      contact_number:
        default: +(99891)-234-56-78
        type: string
      country:
        default: Uzbekistan
        type: string
      description:
        default: uzbek national cousine
        type: string
      latitude:
        default: 40.7128
        type: number
      licence_url:
        default: https://creativecommons.org/licenses/by/3.2/
        type: string
      longitude:
        default: 74.006
        type: number
      opening_hours:
        default: 06:00-22:00
        type: string
      rating:
        default: 4.1
        type: number
      restaurant_name:
        default: Kamolon Osh Markazi
        type: string
      state_province:
        default: Shaykhontohur
        type: string
      website_url:
        default: https://creativecommons.org/licenses/by/3.3/
        type: string
    type: object
  models.CreateReview:
    properties:
      comment:
        default: very good!
        type: string
      rating:
        default: 4.7
        type: number
    type: object
  models.DeleteResponse:
    properties:
      success:
        type: boolean
    type: object
  models.Error:
    properties:
      message:
        type: string
    type: object
  models.EstablishmentImageRespons:
    properties:
      image_url:
        type: string
      message:
        type: string
    type: object
  models.FavouriteModel:
    properties:
      created_at:
        type: string
      establishment_id:
        type: string
      favourite_id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.HotelModel:
    properties:
      contact_number:
        type: string
      created_at:
        type: string
      description:
        type: string
      hotel_id:
        type: string
      hotel_name:
        type: string
      images:
        items:
          $ref: '#/definitions/models.ImageModel'
        type: array
      licence_url:
        type: string
      location:
        $ref: '#/definitions/models.LocationModel'
      owner_id:
        type: string
      rating:
        type: number
      updated_at:
        type: string
      website_url:
        type: string
    type: object
  models.IdReq:
    properties:
      id:
        type: string
    type: object
  models.IdRes:
    properties:
      ids:
        items:
          $ref: '#/definitions/models.IdReq'
        type: array
    type: object
  models.ImageModel:
    properties:
      created_at:
        type: string
      establishment_id:
        type: string
      image_id:
        type: string
      image_url:
        type: string
      updated_at:
        type: string
    type: object
  models.List:
    properties:
      bookings:
        items:
          $ref: '#/definitions/models.BookingRes'
        type: array
    type: object
  models.ListAttractionModel:
    properties:
      attractions:
        items:
          $ref: '#/definitions/models.AttractionModel'
        type: array
      count:
        type: integer
    type: object
  models.ListFavouritesModel:
    properties:
      favourites:
        items:
          $ref: '#/definitions/models.FavouriteModel'
        type: array
    type: object
  models.ListHotelsModel:
    properties:
      count:
        type: integer
      hotels:
        items:
          $ref: '#/definitions/models.HotelModel'
        type: array
    type: object
  models.ListRestaurantsModel:
    properties:
      count:
        type: integer
      restaurants:
        items:
          $ref: '#/definitions/models.RestaurantModel'
        type: array
    type: object
  models.ListReviews:
    properties:
      count:
        type: integer
      reviews:
        items:
          $ref: '#/definitions/models.ReviewModel'
        type: array
    type: object
  models.ListUsersRes:
    type: object
  models.LocationModel:
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      establishment_id:
        type: string
      latitude:
        type: number
      location_id:
        type: string
      longitude:
        type: number
      state_province:
        type: string
      updated_at:
        type: string
    type: object
  models.Login:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.RegisterReq:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
    type: object
  models.RegisterRes:
    properties:
      content:
        type: string
    type: object
  models.RemoveResponse:
    properties:
      success:
        type: boolean
    type: object
  models.RestaurantModel:
    properties:
      contact_number:
        type: string
      created_at:
        type: string
      description:
        type: string
      images:
        items:
          $ref: '#/definitions/models.ImageModel'
        type: array
      licence_url:
        type: string
      location:
        $ref: '#/definitions/models.LocationModel'
      opening_hours:
        type: string
      owner_id:
        type: string
      rating:
        type: number
      restaurant_id:
        type: string
      restaurant_name:
        type: string
      updated_at:
        type: string
      website_url:
        type: string
    type: object
  models.ReviewModel:
    properties:
      comment:
        type: string
      created_at:
        type: string
      establishment_id:
        type: string
      rating:
        type: number
      review_id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.StandartError:
    properties:
      error:
        $ref: '#/definitions/models.Error'
    type: object
  models.TokenResp:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      role:
        type: string
      user_id:
        type: string
    type: object
  models.UpdateAttraction:
    properties:
      address:
        default: updated address
        type: string
      attraction_name:
        default: updated attraction name
        type: string
      city:
        default: updated city
        type: string
      contact_number:
        default: updated contact number
        type: string
      country:
        default: updated country
        type: string
      description:
        default: updated description
        type: string
      latitude:
        default: 1.1
        type: number
      licence_url:
        default: updated licence url
        type: string
      longitude:
        default: 1.1
        type: number
      rating:
        default: 5
        type: number
      state_province:
        default: updated state or province
        type: string
      website_url:
        default: updated website url
        type: string
    type: object
  models.UpdateBookingReq:
    properties:
      hra_id:
        type: string
      id:
        type: string
      is_canceled:
        type: boolean
      number_of_people:
        type: integer
      reason:
        type: string
      will_arrive:
        type: string
      will_leave:
        type: string
    type: object
  models.UpdateHotel:
    properties:
      contact_number:
        default: updated contact number
        type: string
      description:
        default: updated description
        type: string
      hotel_name:
        default: updated hotel name
        type: string
      licence_url:
        default: updated licence url
        type: string
      location:
        $ref: '#/definitions/models.UpdateLocation'
      rating:
        default: 5
        type: number
      website_url:
        default: updated website url
        type: string
    type: object
  models.UpdateLocation:
    properties:
      address:
        default: updated address
        type: string
      city:
        default: updated city
        type: string
      country:
        default: updated country
        type: string
      latitude:
        default: 1.1
        type: number
      longitude:
        default: 1.1
        type: number
      state_province:
        default: updated state or province
        type: string
    type: object
  models.UpdateRestaurant:
    properties:
      address:
        default: updated address
        type: string
      city:
        default: updated city
        type: string
      contact_number:
        default: updated contact number
        type: string
      country:
        default: updated country
        type: string
      description:
        default: updated description
        type: string
      latitude:
        default: 1.1
        type: number
      licence_url:
        default: updated licence url
        type: string
      longitude:
        default: 1.1
        type: number
      opening_hours:
        default: 09:00-00:00
        type: string
      rating:
        default: 4.9
        type: number
      restaurant_name:
        default: updated restaurant name
        type: string
      state_province:
        default: updated state or province
        type: string
      website_url:
        default: updated website url
        type: string
    type: object
  models.UserReq:
    properties:
      card:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  models.UserRes:
    properties:
      card:
        type: string
      created_at:
        type: string
      date_of_birth:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      id:
        type: string
      phone_number:
        type: string
      profile_img:
        type: string
      refresh_token:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  models.UserResCreate:
    properties:
      access_token:
        type: string
      birthday:
        type: string
      card:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      id:
        type: string
      image_url:
        type: string
      phone_num:
        type: string
      refresh_token:
        type: string
      role:
        type: string
    type: object
info:
  contact: {}
  description: API for Touristan
  title: Welcome To Booking API
paths:
  /v1/admins:
    post:
      consumes:
      - application/json
      description: Api for Create admin
      parameters:
      - description: createModel
        in: body
        name: Admin
        required: true
        schema:
          $ref: '#/definitions/models.UserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: CREATE ADMIN
      tags:
      - ADMIN
    put:
      consumes:
      - application/json
      description: Api for Update
      parameters:
      - description: createModel
        in: body
        name: Admin
        required: true
        schema:
          $ref: '#/definitions/models.UserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: UPDATE ADMIN
      tags:
      - ADMIN
  /v1/admins/{id}:
    delete:
      consumes:
      - application/json
      description: Api for Delete
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: DELETE ADMIN
      tags:
      - ADMIN
    get:
      consumes:
      - application/json
      description: Api for Get
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: GET ADMIN
      tags:
      - ADMIN
  /v1/admins/list:
    get:
      consumes:
      - application/json
      description: Api for ListAdmins
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListUsersRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: LIST ADMINS
      tags:
      - ADMIN
  /v1/admins/login:
    post:
      consumes:
      - application/json
      description: Api for login admin
      parameters:
      - description: Login
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: LOGIN
      tags:
      - LOGIN
  /v1/attraction:
    delete:
      consumes:
      - application/json
      description: Api for deleting attraction by attraction_id
      parameters:
      - description: attraction_id
        in: query
        name: attraction_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: DELETE ATTRACTION BY ATTRACTION_ID
      tags:
      - ATTRACTION
    get:
      consumes:
      - application/json
      description: Api for getting attraction by attraction_id
      parameters:
      - description: attraction_id
        in: query
        name: attraction_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AttractionModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: GET ATTRACTION BY ATTRACTION_ID
      tags:
      - ATTRACTION
    post:
      consumes:
      - application/json
      description: Api for creating attraction
      parameters:
      - description: Attraction
        in: body
        name: Attraction
        required: true
        schema:
          $ref: '#/definitions/models.CreateAttraction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AttractionModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: CREATE ATTRACTION
      tags:
      - ATTRACTION
    put:
      consumes:
      - application/json
      description: Api for updating attraction by attraction_id
      parameters:
      - description: attraction_id
        in: query
        name: attraction_id
        required: true
        type: string
      - description: UpdatingAttraction
        in: body
        name: UpdatingAttraction
        required: true
        schema:
          $ref: '#/definitions/models.UpdateAttraction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AttractionModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: UPDATE ATTRACTION
      tags:
      - ATTRACTION
  /v1/attraction/find:
    get:
      consumes:
      - application/json
      description: Api for finding attractions by name
      parameters:
      - in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListAttractionModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Find ATTRACTIONS BY NAME
      tags:
      - ATTRACTION
  /v1/attraction/list:
    get:
      consumes:
      - application/json
      description: Api for listing attractions by page and limit
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListAttractionModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: LIST ATTRACTIONS BY PAGE AND LIMIT
      tags:
      - ATTRACTION
  /v1/attraction/listlocation:
    get:
      consumes:
      - application/json
      description: Api for listing attractions by page, limit, country, city and state_province
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: city
        type: string
      - in: query
        name: country
        type: string
      - in: query
        name: province
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListAttractionModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: LIST ATTRACTIONS BY PAGE, LIMIT, COUNTRY, CITY AND STATE_PROVINCE
      tags:
      - ATTRACTION
  /v1/booking/attractions:
    get:
      consumes:
      - application/json
      description: Api for List Attractions
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.List'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: List Attractions
      tags:
      - BOOKING_ATTRACTION
    post:
      consumes:
      - application/json
      description: Api for Create Attraction Booking
      parameters:
      - description: createModel
        in: body
        name: CreateBookingReq
        required: true
        schema:
          $ref: '#/definitions/models.CreateBookingReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BookingRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Create Attraction Booking
      tags:
      - BOOKING_ATTRACTION
    put:
      consumes:
      - application/json
      description: Api for Update Booked Attraction
      parameters:
      - description: createModel
        in: body
        name: models.UpdateBookingReq
        required: true
        schema:
          $ref: '#/definitions/models.UpdateBookingReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BookingRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Update Booked Attraction
      tags:
      - BOOKING_ATTRACTION
  /v1/booking/attractions/{id}:
    delete:
      consumes:
      - application/json
      description: Api for Delete Attraction
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StandartError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Delete Attraction
      tags:
      - BOOKING_ATTRACTION
    get:
      consumes:
      - application/json
      description: Api for Get All Attractions By User Id
      parameters:
      - in: query
        name: id
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.IdRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Get All Attractions By User Id
      tags:
      - BOOKING_ATTRACTION
  /v1/booking/attractions/deleted:
    get:
      consumes:
      - application/json
      description: Api for List Deleted Attractions
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.List'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: List Deleted Attractions
      tags:
      - BOOKING_ATTRACTION
  /v1/booking/hotels:
    get:
      consumes:
      - application/json
      description: Api for List Hotels
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.List'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: List Hotels
      tags:
      - BOOKING_HOTEL
    post:
      consumes:
      - application/json
      description: Api for Create Hotel Booking
      parameters:
      - description: createModel
        in: body
        name: CreateBookingReq
        required: true
        schema:
          $ref: '#/definitions/models.CreateBookingReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BookingRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Create Hotel Booking
      tags:
      - BOOKING_HOTEL
    put:
      consumes:
      - application/json
      description: Api for Update Booked Hotel
      parameters:
      - description: createModel
        in: body
        name: models.UpdateBookingReq
        required: true
        schema:
          $ref: '#/definitions/models.UpdateBookingReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BookingRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Update Booked Hotel
      tags:
      - BOOKING_HOTEL
  /v1/booking/hotels/{id}:
    delete:
      consumes:
      - application/json
      description: Api for Delete Hotel
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StandartError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Delete Hotel
      tags:
      - BOOKING_HOTEL
    get:
      consumes:
      - application/json
      description: Api for Get All Hotels By User Id
      parameters:
      - in: query
        name: id
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.IdRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Get All Hotels By User Id
      tags:
      - BOOKING_HOTEL
  /v1/booking/hotels/deleted:
    get:
      consumes:
      - application/json
      description: Api for List Deleted Hotels
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.List'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: List Deleted Hotels
      tags:
      - BOOKING_HOTEL
  /v1/booking/restaurants:
    get:
      consumes:
      - application/json
      description: Api for List Restaurants
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.List'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: List Restaurants
      tags:
      - BOOKING_RESTAURANT
    post:
      consumes:
      - application/json
      description: Api for Create Restaurant Booking
      parameters:
      - description: createModel
        in: body
        name: CreateBookingReq
        required: true
        schema:
          $ref: '#/definitions/models.CreateBookingReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BookingRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Create Restaurant Booking
      tags:
      - BOOKING_RESTAURANT
    put:
      consumes:
      - application/json
      description: Api for Update Booked Restaurant
      parameters:
      - description: createModel
        in: body
        name: models.UpdateBookingReq
        required: true
        schema:
          $ref: '#/definitions/models.UpdateBookingReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BookingRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Update Booked Restaurant
      tags:
      - BOOKING_RESTAURANT
  /v1/booking/restaurants/{id}:
    delete:
      consumes:
      - application/json
      description: Api for Delete Restaurant
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StandartError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Delete Restaurant
      tags:
      - BOOKING_RESTAURANT
    get:
      consumes:
      - application/json
      description: Api for Get All Restaurants By User Id
      parameters:
      - in: query
        name: id
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.IdRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Get All Restaurants By User Id
      tags:
      - BOOKING_RESTAURANT
  /v1/booking/restaurants/deleted:
    get:
      consumes:
      - application/json
      description: Api for List Deleted Restaurants
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.List'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: List Deleted Restaurants
      tags:
      - BOOKING_RESTAURANT
  /v1/booking/users/attraction/{id}:
    get:
      consumes:
      - application/json
      description: Api for Get All Users By Attraction Id
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.IdRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Get All Users By Attraction Id
      tags:
      - BOOKING_ATTRACTION
  /v1/booking/users/restaurant/{id}:
    get:
      consumes:
      - application/json
      description: Api for Get All Users By Restaurant Id
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.IdRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Get All Users By Restaurant Id
      tags:
      - BOOKING_RESTAURANT
  /v1/booking/users/room/{id}:
    get:
      consumes:
      - application/json
      description: Api for Get All Users By Room Id
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.IdRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: Get All Users By Room Id
      tags:
      - BOOKING_HOTEL
  /v1/favourite/add:
    post:
      consumes:
      - application/json
      description: Api for adding establishment to favourites
      parameters:
      - description: establishment_id
        in: query
        name: establishment_id
        required: true
        type: string
      - description: user_id
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FavouriteModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: ADD ESTABLISHMENT TO FAVOURITES
      tags:
      - FAVOURITE
  /v1/favourite/list:
    get:
      consumes:
      - application/json
      description: Api for listing favourites by favourite_id
      parameters:
      - description: user_id
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListFavouritesModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: LIST FAVOURITES BY USER_ID
      tags:
      - FAVOURITE
  /v1/favourite/remove:
    delete:
      consumes:
      - application/json
      description: Api for removing favourite by favourite_id
      parameters:
      - description: favourite_id
        in: query
        name: favourite_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RemoveResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: REMOVE FROM FAVOURITES BY FAVOURITE_ID
      tags:
      - FAVOURITE
  /v1/hotel:
    delete:
      consumes:
      - application/json
      description: Api for deleting hotel by hotel_id
      parameters:
      - description: hotel_id
        in: query
        name: hotel_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: DELETE HOTEL BY HOTEL_ID
      tags:
      - HOTEL
    get:
      consumes:
      - application/json
      description: Api for getting hotel by hotel_id
      parameters:
      - description: hotel_id
        in: query
        name: hotel_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HotelModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: GET HOTEL BY HOTEL_ID
      tags:
      - HOTEL
    post:
      consumes:
      - application/json
      description: Api for creating hotel
      parameters:
      - description: Hotel
        in: body
        name: Hotel
        required: true
        schema:
          $ref: '#/definitions/models.CreateHotel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HotelModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: CREATE HOTEL
      tags:
      - HOTEL
    put:
      consumes:
      - application/json
      description: Api for updating hotel by hotel_id
      parameters:
      - description: hotel_id
        in: query
        name: hotel_id
        required: true
        type: string
      - description: UpdatingHotel
        in: body
        name: UpdatingHotel
        required: true
        schema:
          $ref: '#/definitions/models.UpdateHotel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HotelModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: UPDATE HOTEL
      tags:
      - HOTEL
  /v1/hotel/find:
    get:
      consumes:
      - application/json
      description: Api for listing hotels by name
      parameters:
      - in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListHotelsModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: FIND HOTELS BY NAME
      tags:
      - HOTEL
  /v1/hotel/list:
    get:
      consumes:
      - application/json
      description: Api for listing hotels by page and limit
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListHotelsModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: LIST HOTELS BY PAGE AND LIMIT
      tags:
      - HOTEL
  /v1/hotel/listlocation:
    get:
      consumes:
      - application/json
      description: Api for listing hotels by page, limit, country, city and state_province
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: city
        type: string
      - in: query
        name: country
        type: string
      - in: query
        name: province
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListHotelsModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: LIST HOTELS BY PAGE, LIMIT, COUNTRY, CITY AND STATE_PROVINCE
      tags:
      - HOTEL
  /v1/media/establishment/{id}:
    post:
      consumes:
      - application/json
      description: Through this api frontent can upload establishment photo and get
        the link to the media.
      parameters:
      - description: Image
        in: formData
        name: file
        required: true
        type: file
      - description: Establishment_ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EstablishmentImageRespons'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Upload Establishment photo
      tags:
      - MEDIA
  /v1/media/user-photo:
    post:
      consumes:
      - application/json
      description: Through this api frontent can upload user photo and get the link
        to the media.
      parameters:
      - description: Image
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Upload User photo
      tags:
      - MEDIA
  /v1/restaurant:
    delete:
      consumes:
      - application/json
      description: Api for deleting restaurant by restaurant_id
      parameters:
      - description: restaurant_id
        in: query
        name: restaurant_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: DELETE RESTAURANT BY RESTAURANT_ID
      tags:
      - RESTAURANT
    get:
      consumes:
      - application/json
      description: Api for getting restaurant by restaurant_id
      parameters:
      - description: restaurant_id
        in: query
        name: restaurant_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RestaurantModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: GET RESTAURANT BY RESTAURANT_ID
      tags:
      - RESTAURANT
    post:
      consumes:
      - application/json
      description: Api for creating restaurant
      parameters:
      - description: Restaurant
        in: body
        name: Restaurant
        required: true
        schema:
          $ref: '#/definitions/models.CreateRestaurant'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RestaurantModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: CREATE RESTAURANT
      tags:
      - RESTAURANT
    put:
      consumes:
      - application/json
      description: Api for updating restaurant by restaurant_id
      parameters:
      - description: restaurant_id
        in: query
        name: restaurant_id
        required: true
        type: string
      - description: UpdatingRestaurant
        in: body
        name: UpdatingRestaurant
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRestaurant'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RestaurantModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: UPDATE RESTAURANT
      tags:
      - RESTAURANT
  /v1/restaurant/find:
    get:
      consumes:
      - application/json
      description: Api for listing restaurants by name
      parameters:
      - in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListRestaurantsModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: FIND RESTAURANTS BY NAME
      tags:
      - RESTAURANT
  /v1/restaurant/list:
    get:
      consumes:
      - application/json
      description: Api for listing restaurants by page and limit
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListRestaurantsModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: LIST RESTAURANTS BY PAGE AND LIMIT
      tags:
      - RESTAURANT
  /v1/restaurant/listlocation:
    get:
      consumes:
      - application/json
      description: Api for listing restaurants by page, limit, country, city and state_province
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: city
        type: string
      - in: query
        name: country
        type: string
      - in: query
        name: province
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListRestaurantsModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: LIST RESTAURANTS BY PAGE, LIMIT, COUNTRY, CITY AND STATE_PROVINCE
      tags:
      - RESTAURANT
  /v1/review/create:
    post:
      consumes:
      - application/json
      description: Api for creating review
      parameters:
      - description: establishment_id
        in: query
        name: establishment_id
        required: true
        type: string
      - description: user_id
        in: query
        name: user_id
        required: true
        type: string
      - description: Review
        in: body
        name: Review
        required: true
        schema:
          $ref: '#/definitions/models.CreateReview'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReviewModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: CREATE REVIEW
      tags:
      - REVIEW
  /v1/review/delete:
    delete:
      consumes:
      - application/json
      description: Api for deleting review by review_id
      parameters:
      - description: review_id
        in: query
        name: review_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: DELETE REVIEW BY REVIEW_ID
      tags:
      - REVIEW
  /v1/review/list:
    get:
      consumes:
      - application/json
      description: Api for listing reviews by establishment_id
      parameters:
      - description: establishment_id
        in: query
        name: establishment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListReviews'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: LIST REVIEWS BY ESTABLISHMENT_ID
      tags:
      - REVIEW
  /v1/token/{refresh}:
    get:
      consumes:
      - application/json
      description: Api for updated acces token
      parameters:
      - description: Refresh Token
        in: path
        name: refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: UPDATE TOKEN
      tags:
      - TOKEN
  /v1/users:
    post:
      consumes:
      - application/json
      description: Api for Create
      parameters:
      - description: createModel
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.UserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: CREATE
      tags:
      - USER
    put:
      consumes:
      - application/json
      description: Api for Update
      parameters:
      - description: createModel
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.UserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: UPDATE
      tags:
      - USER
  /v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Api for Delete
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: DELETE
      tags:
      - USER
    get:
      consumes:
      - application/json
      description: Api for Get
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: GET
      tags:
      - USER
  /v1/users/code:
    get:
      consumes:
      - application/json
      description: Api for verify new password code
      parameters:
      - in: query
        name: code
        type: string
      - in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: FORGET PASSWORD CODE
      tags:
      - SET-PASSWORD
  /v1/users/list:
    get:
      consumes:
      - application/json
      description: Api for ListUsers
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: column
        type: string
      - in: query
        name: value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListUsersRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: LIST USERS
      tags:
      - USER
  /v1/users/list/deleted:
    get:
      consumes:
      - application/json
      description: Api for ListDeletedUsers
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: column
        type: string
      - in: query
        name: value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListUsersRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: LIST DELETED USERS
      tags:
      - USER
  /v1/users/login:
    post:
      consumes:
      - application/json
      description: Api for login user
      parameters:
      - description: Login
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: LOGIN
      tags:
      - LOGIN
  /v1/users/password:
    put:
      consumes:
      - application/json
      description: Api for update new password
      parameters:
      - in: query
        name: email
        type: string
      - in: query
        name: password
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: SET NEW PASSWORD
      tags:
      - SET-PASSWORD
  /v1/users/register:
    post:
      consumes:
      - application/json
      description: Api for register a new user
      parameters:
      - description: RegisterUser
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.RegisterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: REGISTER USER
      tags:
      - SIGNUP
  /v1/users/set/{email}:
    get:
      consumes:
      - application/json
      description: Api for set new password
      parameters:
      - description: EMAIL
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: FORGET PASSWORD
      tags:
      - SET-PASSWORD
  /v1/users/token:
    get:
      consumes:
      - application/json
      description: Api for Get user by token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: GET BY TOKEN
      tags:
      - USER
  /v1/users/verify:
    get:
      consumes:
      - application/json
      description: Api for verify a new user
      parameters:
      - in: query
        name: code
        type: string
      - in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StandartError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StandartError'
      security:
      - BearerAuth: []
      summary: VERIFICATION
      tags:
      - SIGNUP
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
